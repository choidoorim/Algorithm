#<코드잇>
#정수: int/실수: float
def codeup_06():
    print("\"!@#$%^&*()\'")

def codeup_19():
    y, m, d = input().split('.')
    print(d, m, y, sep='-')

def codeup_23():
    a,b,c = input().split(':')
    print(b)

def codeup_24():
    word1, word2 = input().split()
    s = word1 + word2
    print(s)

def codeup_25():
    word1, word2 = input().split()
    s = int(word1) + int(word2)
    print(s)

def codeup_26():
    word1 = input()
    word2 = input()
    s = float(word1) + float(word2)
    print(s)

def codeup_27():
    word1 = input()
    a = int(word1)
    print('%x' % a)

# %x -> 소문자 출력, %X -> 대문자 출력
def codeup_28():
    word1 = input()
    a = int(word1)
    print('%X' % a)

def codeup_29():
    word1 = input()
    a = int(word1, 16)  # 입력된 a를 16진수로 변환
    print('%o' % a)

#UniCode: 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하는 것.
def codeup_30():
    word1 = ord(input()) #unicode로 입력 받은 문자를 변환.
    print(word1)

def codeup_31():
    word1 = int(input())
    print(chr(word1))

def codeup_32():
    word1 = int(input())
    print(-word1)

def codeup_33():
    word1 = ord(input())  # unicode로 입력 받은 문자를 변환.
    word2 = word1 + 1
    print(chr(word2))

def codeup_34():
    a, b = input().split()
    c = int(a) - int(b)
    print(c)

def codeup_35():
    a, b = input().split()
    c = float(a) * float(b)
    print(c)

def codeup_36():
    word1, n = input().split()
    print(word1 * int(n))

def codeup_37():
    n = input()
    word1 = input()
    print(int(n)* word1)

def codeup_38():
    w1, w2 = input().split()
    print(int(w1)**int(w2))

def codeup_39():
    w1, w2 = input().split()
    print(float(w1) ** float(w2))

def codeup_40():
    w1, w2 = input().split()
    print(int(w1)//int(w2)) # '//'연산자는 몫을 계산해준다.

def codeup_41():
    w1, w2 = input().split()
    print(int(w1)%int(w2))

def codeup_42(): #정확도 측정은 round를 통해 계산해야한다.
    w1 = input()
    print(round(float(w1), 2))

def codeup_43():
    w1, w2 = input().split()
    result = float(w1)/float(w2) #실수가 컴퓨터에 저장되는 과정에서 잘림 오차가 자주 발생한다.
    print('%.3f'%result)

def codeup_44():
    w1, w2 = input().split()
    print(int(w1) + int(w2))
    print(int(w1) - int(w2))
    print(int(w1) * int(w2))
    print(int(w1) // int(w2))
    print(int(w1) % int(w2))
    result = float(w1) / float(w2)
    print(round(float(result), 2))

def codeup_45():
    w1, w2, w3 = input().split()
    sum = int(w1) + int(w2) + int(w3)
    rv = sum/3
    print(sum, round(rv, 2))

def codeup_46():
    n = input()
    shift = int(n) << 1 # << 왼쪽 쉬프트. >> 오른쪽 쉬프트.
    print(shift)

def codeup_47():
    n1, n2 = input().split()
    print(int(n1) << int(n2))

def codeup_48():
    n1, n2 = input().split()
    print(int(n1) < int(n2)) #비교/관계연산자는 <, >, <=, >=, ==(같다), !=(다르다)

def codeup_49():
    n1, n2 = input().split()
    print(int(n1) == int(n2))

def codeup_50():
    n1, n2 = input().split()
    print(int(n1) <= int(n2))

def codeup_51():
    n1, n2 = input().split()
    print(int(n1) != int(n2))

def codeup_52():
    n = int(input())
    print(bool(n)) #python에서 0 값은 false 그리고 나머지 값들은 true로 판단.

def codeup_53():
    n = bool(int(input()))
    print(not n) #true, false와 같은 논리 연산 값을 반대로 바꿔준다.

def codeup_54():
    n1, n2 = input().split()
    print(bool(int(n1)) and bool(int(n2))) #python이 괄호를 해석하는 순서는 안에서 밖이다. EX) input -> bool

def codeup_55():
    n1, n2 = input().split()
    print(bool(int(n1)) or bool(int(n2)))

def codeup_56():
    n1, n2 = input().split()
    print((bool(int(n1)) and (not bool(int(n2)))) or ((not bool(int(n1))) and bool(int(n2)))) # XOR

def codeup_57():
    n1, n2 = input().split() #논리연산 문제가 나올 때는 그림을 그려보다. 반도체 수업 때를 생각. EX) or Gate/ and Gate...
    print((bool(int(n1)) or (not bool(int(n2)))) and  ((not bool(int(n1))) or bool(int(n2))))

def codeup_58():
    n1, n2 = input().split()
    print(not(bool(int(n1)) or bool(int(n2))) and not(bool(int(n1)) or bool(int(n2))))


codeup_58()